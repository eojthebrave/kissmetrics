<?php

/**
 * @file
 * This module allows you to log Rule events as KissMetrics events.
 */

define('KISSMETRICS_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Implements hook_permission().
 */
function kissmetrics_permission() {
  return array(
    'configure kissmetrics' =>  array(
      'title' => t('Configure KISSmetrics'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function kissmetrics_menu() {
  $items = array();

  $items['admin/config/services/kissmetrics'] = array(
    'title' => 'KISSmetrics',
    'description' => 'Configure KISSmetrics',
    'access arguments' => array('configure kissmetrics'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kissmetrics_configuration_form'),
    'file' => 'kissmetrics.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function kissmetrics_libraries_info() {
  $libraries['kissmetrics'] = array(
    'name' => 'KISSmetrics',
    'vendor url' => 'http://www.kissmetrics.com',
    'download url' => 'https://github.com/kissmetrics/KISSmetrics',
    'version' => '0',
    'files' => array(
      'php' => array(
        'km.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_registry_files_alter().
 */
function kissmetrics_registry_files_alter(&$files, $modules) {
  if (($library = libraries_detect('kissmetrics')) && !empty($library['installed'])) {
    $files[$library['library path'] . '/km.php'] =  array(
      'module' => 'kissmetrics',
      'weight' => 0,
    );
  }
}

/**
 * Implements hook_cron().
 */
function kissmetrics_cron() {
  if ($api_key = variable_get('kissmetrics_api_key')) {
    if ($use_cron = variable_get('kissmetrics_use_cron', TRUE) && $log_dir = variable_get('kissmetrics_log_dir', '/tmp/')) {
      KM::init($api_key, array('use_cron' => $use_cron, 'log_dir' => $log_dir));
      KM::send_logged_queries();
    }
  }
}

/**
 * Implements hook_page_build().
 */
function kissmetrics_page_build(&$page) {
  $pages = variable_get('kissmetrics_visibility_pages', KISSMETRICS_PAGES);
  $visibility_mode = variable_get('kissmetrics_visibility_mode', 0);
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));

  if ($visibility_mode == 0 && drupal_match_path($path, $pages)) {
    return;
  }

  if ($visibility_mode == 1 && !drupal_match_path($path, $pages)) {
    return;
  }

  if ($api_key = variable_get('kissmetrics_api_key')) {
    // Include the KISSmetrics JavaScript library.
    $script  = "var _kmq = _kmq || [];";
    $script .= "var _kmk = _kmk || '" . $api_key . "';";
    $script .= "function _kms(u){" ;
    $script .= "setTimeout(function(){";
    $script .= "var d = document, f = d.getElementsByTagName('script')[0],";
    $script .= "s = d.createElement('script');";
    $script .= "s.type = 'text/javascript'; s.async = true; s.src = u;";
    $script .= "f.parentNode.insertBefore(s, f);";
    $script .= "}, 1); }";
    $script .= "_kms('//i.kissmetrics.com/i.js');";
    $script .= "_kms('//doug1izaerwt3.cloudfront.net/' + _kmk + '.1.js');";

    // Identify the current user.
    $id = kissmetrics_user_id();

    $script .= "_kmq.push(['identify', '" . $id . "']);";

    foreach (kissmetrics_user_aliases() as $alias) {
      $script .= "_kmq.push(['alias', " . $id . ", '" . $alias . "' ]);";
    }

    $page['page_top']['#attached']['js'] = array(
      $script => array(
        'type' => 'inline',
        'scope' => 'header'
      ),
    );
  }
}

/**
 * Records an event for KISSmetrics.
 * @param string $event
 *   Name of the event to be logged.
 * @param string|array $props
 *   An string or array containing properties of the event.
 *   String values ne to have one parameter per line in key|value format.
 *   Array examle:
 *   array (
 *     'key1' => 'value1',
 *     'key2' => 'value2',
 *     'key3' => 'valye3',
 *   )
 *   String example:
 *   "key1|value1\nkey2|value2\nkey3|value3"
 */
function kissmetrics_log_event($event, $props) {
  if ($api_key = variable_get('kissmetrics_api_key')) {
    $use_cron = variable_get('kissmetrics_use_cron', TRUE);
    $log_dir = variable_get('kissmetrics_log_dir', '/tmp/');

    KM::init($api_key, array('use_cron' => $use_cron, 'log_dir' => $log_dir));

    // Identify the current user.
    $id = kissmetrics_user_id();

    KM::identify($id);

    foreach (kissmetrics_user_aliases() as $alias) {
      KM::alias($id, $alias);
    }

    $properties = array();

    if (is_string($props)) {
      $properties = kissmetrics_generate_prop_array($props);
    }
    elseif (is_array($props)) {
      $properties = $props;
    }
    if (is_array($properties)) {
      KM::record($event, $properties);
    }
  }
}

/**
 * Sets properties on the identified user.
 * @param string|array $props
 *   An string or array containing properties of the event.
 *   String values ne to have one parameter per line in key|value format.
 *   Array examle:
 *   array (
 *     'key1' => 'value1',
 *     'key2' => 'value2',
 *     'key3' => 'valye3',
 *   )
 *   String example:
 *   "key1|value1\nkey2|value2\nkey3|value3"
 */
function kissmetrics_set_property($props) {
  if ($api_key = variable_get('kissmetrics_api_key')) {
    $use_cron = variable_get('kissmetrics_use_cron', TRUE);
    $log_dir = variable_get('kissmetrics_log_dir', '/tmp/');

    KM::init($api_key, array('use_cron' => $use_cron, 'log_dir' => $log_dir));

    // Identify the current user.
    $id = kissmetrics_user_id();

    KM::identify($id);

    foreach (kissmetrics_user_aliases() as $alias) {
      KM::alias($id, $alias);
    }

    $properties = array();

    if (is_string($props)) {
      $properties = kissmetrics_generate_prop_array($props);
    }
    elseif (is_array($props)) {
      $properties = $props;
    }
    if (is_array($properties) && !empty($properties)) {
      KM::set($properties);
    }
  }
}

/**
 * Generate the properties array from the string entered by the user.
 * @return array
 */
function kissmetrics_generate_prop_array($str) {
  if (!is_string($str)) {
    return NULL;
  }
  $properties = array();
  $lines = explode("\n", $str);
  foreach ($lines as $line) {
    list($key, $value) = explode('|', $line);
    if ($key) {
      $properties[$key] = $value;
    }
  }
  return $properties;
}

/**
 * Determines an appropriate ID for the current user.
 *
 * @return int|string
 *   An ID representing the user.
 */
function kissmetrics_user_id() {
  global $user;

  if (user_is_logged_in()) {
    $id = $user->uid;
  }
  elseif (module_exists('session_api'))  {
    $id = session_api_get_sid();
  }
  else {
    $id = NULL;
    $data = array(rand(), time());
    $data = implode('|', $data);
    $data = base64_encode($data);
    $id = sha1($data);
  }

  return $id;
}

/**
 * Determines any appropriate aliases for the current user.
 *
 * @return array
 *   An array of aliases.
 */
function kissmetrics_user_aliases() {
  global $user;

  $aliases = array();

  if (user_is_logged_in()) {
    $aliases[] = $user->mail;
    $aliases[] = $user->name;
  }

  return $aliases;
}
