<?php

/**
 * @file
 * This module allows you to log Rule events as KissMetrics events.
 */

define('KISSMETRICS_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Implements hook_page_build().
 */
function kissmetrics_page_build(&$page) {
  kissmetrics_setup_library();
  if (!class_exists('KM')) {
    return;
  }
  $api_key = variable_get('kissmetrics_api_key');
  $script  = "var _kmq = _kmq || [];";
  $script .= "var _kmk = _kmk || '" . $api_key . "';";
  $script .= "function _kms(u){" ;
  $script .= "setTimeout(function(){";
  $script .= "var d = document, f = d.getElementsByTagName('script')[0],";
  $script .= "s = d.createElement('script');";
  $script .= "s.type = 'text/javascript'; s.async = true; s.src = u;";
  $script .= "f.parentNode.insertBefore(s, f);";
  $script .= "}, 1); }";
  $script .= "_kms('//i.kissmetrics.com/i.js');";
  $script .= "_kms('//doug1izaerwt3.cloudfront.net/' + _kmk + '.1.js');";

  $page['page_top']['#attached']['js'] = array(
    $script => array(
      'type' => 'inline',
      'scope' => 'header'
    ),
  );
  $page['page_bottom']['#attached']['js'] = array(
    drupal_get_path('module', 'kissmetrics') . '/js/kissmetrics.js' => array(
      'type' => 'file',
      'scope' => 'footer'
    ),
  );
}

/**
 * Implements hook_menu().
 */
function kissmetrics_menu() {
  $items = array();

  $items['admin/config/services/kissmetrics'] = array(
    'title' => 'KISSmetrics',
    'description' => 'Configure KISSmetrics',
    'access arguments' => array('configure kissmetrics'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kissmetrics_configuration_form'),
    'file' => 'includes/kissmetrics.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function kissmetrics_permission() {
  return array(
    'configure kissmetrics' =>  array(
      'title' => t('Configure KISSmetrics'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function kissmetrics_libraries_info() {
  $libraries['kissmetrics'] = array(
    'name' => 'KISSmetrics',
    'vendor url' => 'http://www.kissmetrics.com',
    'download url' => 'https://github.com/kissmetrics/KISSmetrics',
    'version' => '0',
    'files' => array(
      'php' => array(
        'km.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_registry_files_alter().
 */
function kissmetrics_registry_files_alter(&$files, $modules) {
  if (($library = libraries_detect('kissmetrics')) && !empty($library['installed'])) {
    $files[$library['library path'] . '/km.php'] =  array(
      'module' => 'kissmetrics',
      'weight' => 0,
    );
  }
}

/**
 * Records an event for KISSmetrics.
 * @param string $event
 *   Name of the event to be logged.
 * @param string|array $props
 *   An string or array containing properties of the event.
 *   String values ne to have one parameter per line in key|value format.
 *   Array examle:
 *   array (
 *     'key1' => 'value1',
 *     'key2' => 'value2',
 *     'key3' => 'valye3',
 *   )
 *   String example:
 *   "key1|value1\nkey2|value2\nkey3|value3"
 */
function kissmetrics_log_event($event, $props) {
  kissmetrics_setup_library();
  if (!class_exists('KM')) {
    return;
  }

  $properties = array();
  if (is_string($props)) {
    $properties = kissmetrics_generate_prop_array($props);
  }
  elseif (is_array($props)) {
    $properties = $props;
  }
  if (is_array($properties)) {
    KM::record($event, $properties);
  }
}

/**
 * Sets properties on the identified user.
 * @param string|array $props
 *   An string or array containing properties of the event.
 *   String values ne to have one parameter per line in key|value format.
 *   Array examle:
 *   array (
 *     'key1' => 'value1',
 *     'key2' => 'value2',
 *     'key3' => 'valye3',
 *   )
 *   String example:
 *   "key1|value1\nkey2|value2\nkey3|value3"
 */
function kissmetrics_set_property($props) {
  kissmetrics_setup_library();
  if (!class_exists('KM')) {
    return;
  }

  $properties = array();
  if (is_string($props)) {
    $properties = kissmetrics_generate_prop_array($props);
  }
  elseif (is_array($props)) {
    $properties = $props;
  }
  if (is_array($properties) && !empty($properties)) {
    KM::set($properties);
  }
}

/**
 * Generate the properties array from the string entered by the user.
 * @return array
 */
function kissmetrics_generate_prop_array($str) {
  if (!is_string($str)) {
    return NULL;
  }
  $properties = array();
  $lines = explode("\n", $str);
  foreach ($lines as $line) {
    list($key, $value) = explode('|', $line);
    if ($key) {
      $properties[$key] = $value;
    }
  }
  return $properties;
}

/**
 * Load and initialize KM class.
 */
function kissmetrics_setup_library() {
  if (class_exists('KM')) {
    return;
  }

  $pages = variable_get('kissmetrics_visibility_pages', KISSMETRICS_PAGES);
  $visibility_mode = variable_get('kissmetrics_visibility_mode', 0);
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  if ($visibility_mode == 0 && drupal_match_path($path, $pages)) {
    return;
  }

  if ($visibility_mode == 1 && !drupal_match_path($path, $pages)) {
    return;
  }

  $api_key = variable_get('kissmetrics_api_key');
  if (!$api_key) {
    drupal_set_message(t('Please configure KISSmetrics.'), 'warning');
    return;
  }
  $use_cron = variable_get('kissmetrics_use_cron', TRUE);
  $log_dir = variable_get('kissmetrics_log_dir', '/tmp/');
  KM::init($api_key, array('use_cron' => $use_cron, 'log_dir' => $log_dir));
  global $user;
  if ($user->uid) {
    KM::identify($user->mail);
    KM::alias($user->name, $user->mail);
    if (isset($_COOKIE['km_ai'])) {
      KM::alias($_COOKIE['km_ai'], $user->mail);
    }
    drupal_add_js(array('kissmetrics' => array('identity' => $user->mail)), 'setting');
  }
  else {
    if (isset($_COOKIE['km_ai'])) {
      $random = $_COOKIE['km_ai'];
    }
    else {
      $random = md5(rand());
    }
    KM::identify($random);
    drupal_add_js(array('kissmetrics' => array('identity' => $random)), 'setting');
  }
}
