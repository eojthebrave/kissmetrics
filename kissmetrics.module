<?php

/**
 * @file
 * Provides integration with the KISSmetrics person-based analytics service.
 */

/**
 * Remove tracking from all administrative pages, see http://drupal.org/node/34970.
 */
define('KISSMETRICS_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Load KISSmetrics on every page except the listed pages.
 */
define('KISSMETRICS_VISIBILITY_NOTLISTED', 0);

/**
 * Load KISSmetrics on only the listed pages.
 */
define('KISSMETRICS_VISIBILITY_LISTED', 1);

/**
 * Implements hook_permission().
 */
function kissmetrics_permission() {
  return array(
    'administer kissmetrics' =>  array(
      'title' => t('Administer KISSmetrics'),
      'description' => t('Allows a user to configure KISSmetrics.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function kissmetrics_menu() {
  $items['admin/config/services/kissmetrics'] = array(
    'title' => 'KISSmetrics',
    'description' => 'Configure an API key, logging behavior and page restrictions.',
    'access arguments' => array('administer kissmetrics'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kissmetrics_configuration_form'),
    'file' => 'kissmetrics.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function kissmetrics_help($path, $arg) {
  switch ($path) {
    case 'admin/help#kissmetrics':
      $output = '';
      $output .= '<p>' . t('<a href="@kissmetrics">KISSmetrics</a> is a person-based analytics service which helps to identify, understand, and improve the metrics that drive online business. KISSmetrics makes it simple to get the information needed to make better product and marketing decisions.') . '</p>';
      $output .= '<p>' . t('For more information on getting started with KISSmetrics, view the official <a href="@overview">overview</a> documentation page.', array('@overview' => 'http://support.kissmetrics.com/getting-started/overview.html')) . '</p>';
      $output .= '<h2>' . t('Configuration') . '</h2>';
      $output .= '<p>' . t('To configure KISSmetrics, visit the KISSmetrics <a href="@administration">administration page</a>. At minimum, you must configure an API key in order for data to be sent to the KISSmetrics service.', array('@administration' => url('admin/config/services/kissmetrics'))) . '</p>';
      $output .= '<h2>' . t('Usage') . '</h2>';
      $output .= '<p>' . t('KISSmetrics automatically tracks basic data such as page views, form fields and search engine hits. To track custom events, such as when a user edits an existing page or posts a new comment you can install the Rules module. Then, see the Rules <a href="@rules">administration page</a>.', array('@kissmetrics' => 'http://www.kissmetrics.com', '@rules' => url('admin/config/workflow/rules'))) . '</p>';
      $output .= '<p>' . t('KISSmetrics provides a Rules action for logging a KISSmetrics event or setting a property on the identified user. These actions can be triggered by any of the conditions supported by Rules. For more information on Rules view the <a href="@documentation">Rules documentation</a>.', array('@documentation' => 'http://drupal.org/documentation/modules/rules')) . '</p>';
      return $output;
    case 'admin/config/services/kissmetrics':
      return '<p>' . t('<a href="@kissmetrics">KISSmetrics</a> is a person-based analytics service. KISSmetrics automatically tracks basic data such as page views, form fields and search engine hits. To track custom events, such as when a user edits an existing page or posts a new comment, see the Rules <a href="@rules">administration page</a>.', array('@kissmetrics' => 'http://www.kissmetrics.com', '@rules' => url('admin/config/workflow/rules'))) . '</p>';
  }
}

/**
 * Implements hook_libraries_info().
 */
function kissmetrics_libraries_info() {
  $libraries['kissmetrics-php'] = array(
    'name' => 'KISSmetrics',
    'vendor url' => 'http://www.kissmetrics.com',
    'download url' => 'https://github.com/kissmetrics/kissmetrics-php',
    'version' => '0',
    'files' => array(
      'php' => array(
        'src/KISSmetrics/Client.php',
        'src/KISSmetrics/ClientException.php',
        'src/KISSmetrics/Transport/Delayed.php',
        'src/KISSmetrics/Transport/Mock.php',
        'src/KISSmetrics/Transport/Sockets.php',
        'src/KISSmetrics/Transport/Transport.php',
        'src/KISSmetrics/Transport/TransportException.php',
      ),
    ),
    'xautoload' => function($adapter) {
      $adapter->composerJson('composer.json');
    },
  );

  return $libraries;
}

/**
 * Implements hook_cron().
 */
function kissmetrics_cron() {
  kissmetrics_send_logged_queries();
}

/**
 * Implements hook_user_login().
 */
function kissmetrics_user_login(&$edit, $account) {
  // Identify users the first time they log in.
  if (empty($account->access)) {
    kissmetrics_record_event('User logged in for the first time.');
  }
}

/**
 * Implements hook_page_build().
 */
function kissmetrics_page_build(&$page) {
  $pages = variable_get('kissmetrics_visibility_pages', KISSMETRICS_PAGES);
  $visibility_mode = variable_get('kissmetrics_visibility_mode', KISSMETRICS_VISIBILITY_NOTLISTED);
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));

  if ($visibility_mode == 0 && drupal_match_path($path, $pages)) {
    return;
  }

  if ($visibility_mode == 1 && !drupal_match_path($path, $pages)) {
    return;
  }

  if ($api_key = variable_get('kissmetrics_api_key')) {
    // Include the KISSmetrics JavaScript library.
    $script  = "var _kmq = _kmq || [];";
    $script .= "var _kmk = _kmk || '" . $api_key . "';";
    $script .= "function _kms(u){" ;
    $script .= "setTimeout(function(){";
    $script .= "var d = document, f = d.getElementsByTagName('script')[0],";
    $script .= "s = d.createElement('script');";
    $script .= "s.type = 'text/javascript'; s.async = true; s.src = u;";
    $script .= "f.parentNode.insertBefore(s, f);";
    $script .= "}, 1); }";
    $script .= "_kms('//i.kissmetrics.com/i.js');";
    $script .= "_kms('//doug1izaerwt3.cloudfront.net/' + _kmk + '.1.js');";

    $page['page_top']['#attached']['js'][] = array(
      $script => array(
        'type' => 'inline',
        'scope' => 'header'
      ),
    );
  }
}

/**
 * Initialize and return a new KISSmetrics\Client object.
 *
 * @param bool $use_cron
 *  All the requester to specify if they want to use the Sockets transport to
 *  send events to the KISSMetrics API immediatly (TRUE). Or to use the Delayed
 *  transport to log events locally and then send them to KISSmetrics on cron
 *  (FALSE). If excluded, or left as NULL use the site wide settings.
 *
 * @return \KISSmetrics\Client
 */
function kissmetrics_client_initialize($use_cron = NULL) {
  // If the user didn't specify whether or not they want to use cron to log
  // events locally and then submit them via a cron job later on we look up the
  // siteside setting.
  if (is_null($use_cron)) {
    $use_cron = variable_get('kissmetrics_use_cron', TRUE);
  }

  $api_key = variable_get('kissmetrics_api_key', FALSE);
  if ($api_key === FALSE) {
    return FALSE;
  }

  if ($use_cron === TRUE) {
    $log_dir = drupal_realpath(kissmetrics_get_directory());
    $km = new KISSmetrics\Client($api_key, KISSmetrics\Transport\Delayed::initDefault($log_dir));
  }
  else {
    $km = new KISSmetrics\Client($api_key, KISSmetrics\Transport\Sockets::initDefault());
  }

  return $km;
}

/**
 * Record a KISSmetrics event.
 *
 * @param string $name
 *   The name of the event to record. If a name is not specified, any specified
 *   properties will be set on the identified user.
 * @param string|array $properties
 *   A string or associative array containing properties of the event.
 *   String values must be listed one per line in key|value format.
 * @param object $account
 *   The account of the user to record the event as, defaults to current user is
 *   none is provided.
 */
function kissmetrics_record_event($name = '', $properties = array(), $account = NULL) {
  // Only proceed if either a name or properties were specified.
  if (empty($name) && empty($properties)) {
    return;
  }

  if ($km = kissmetrics_client_initialize()) {

    // Identify the current user.
    $id = kissmetrics_user_id($account);

    $km->identify($id);

    // Gather all of the user's aliases.
    foreach (kissmetrics_user_aliases($account) as $alias) {
      if ($alias != $id) {
        $km->alias($alias);
      }
    }

    // Convert a string of event properties into an array.
    if (is_string($properties)) {
      $props = _kissmetrics_generate_prop_array($properties);
    }
    else {
      $props = $properties;
    }

    // Record an event if a name was specified, otherwise set properties on the
    // identified user.
    if (!empty($name)) {
      $km->record($name, $props);
    }
    else {
      $km->set($props);
    }

    $km->submit();
  }
  else {
    watchdog('kissmetrics', 'The KISSmetrics class is not available. Make sure that the KISSmetrics PHP library is installed properly and then ensure that the KM class is registered by clearing the site cache.', array(), WATCHDOG_ERROR);
  }
}

/**
 * Helper function to generate an array of properties from a string where each
 * property is listed on a separate line and property keys and values are
 * separated by a vertical bar.
 *
 * @param string $properties
 *   A string of properties where each property is listed on a separate line and
 *   property keys and values are separated by a vertical bar.
 *
 * @return array
 *   An array of properties.
 */
function _kissmetrics_generate_prop_array($properties) {
  $properties = trim($properties);
  $props = array();
  $lines = explode("\n", $properties);

  foreach ($lines as $line) {
    list($key, $value) = explode('|', $line);

    if ($key) {
      $props[$key] = $value;
    }
  }

  return $props;
}

/**
 * Determines an appropriate ID for the current user.
 *
 * @param object $account
 *   The user account to get the id for. If none is supplied use the currently
 *   logged in user.
 *
 * @return int|string
 *   An ID representing the user.
 */
function kissmetrics_user_id($account = NULL) {
  if (is_null($account)) {
    global $user;
    $account = $user;
  }

  if (user_is_logged_in()) {
    $id = $account->uid;
  }
  elseif (!empty($_COOKIE['km_ai'])) {
    $id = $_COOKIE['km_ai'];
  }
  else {
    $id = array(rand(), time());
    $id = implode('|', $id);
    $id = base64_encode($id);
    $id = sha1($id);
  }

  // Allow other modules to alter the KM identifier.
  drupal_alter('kissmetrics_user_id', $id, $account);

  return $id;
}

/**
 * Determines any appropriate aliases for the current user.
 *
 * @param object $account
 *   The user account to get the aliases for. Defaults to the current user if
 *   none is specified.
 *
 * @return array
 *   An array of aliases.
 */
function kissmetrics_user_aliases($account = NULL) {
  if (is_null($account)) {
    global $user;
    $account = $user;
  }

  $aliases = array();

  if (user_is_logged_in()) {
    $aliases[] = $account->mail;
    $aliases[] = $account->name;

    if (!empty($_COOKIE['km_ai'])) {
      $aliases[] = $_COOKIE['km_ai'];
    }
  }

  return $aliases;
}

/**
 * Send logged queries to KISSmetrics.
 */
function kissmetrics_send_logged_queries() {
  if ($api_key = variable_get('kissmetrics_api_key')) {
    if ($use_cron = variable_get('kissmetrics_use_cron', TRUE) && $log_dir = kissmetrics_get_directory()) {
      if (class_exists('KISSmetrics\Client')) {
        $log_dir = drupal_realpath($log_dir);
        $km_transport = KISSmetrics\Transport\Delayed::initDefault($log_dir);
        $km_transport->sendLoggedData();
      }
      else {
        watchdog('kissmetrics', 'The KISSmetrics class is not available. Make sure that the KISSmetrics PHP library is installed properly and then ensure that the KM class is registered by clearing the site cache.', array(), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Constructs a URI to the request log directory.
 *
 * @param string $directory
 *   Optional string specifying the filepath or URI of a directory to get.
 *
 * @return string
 *   A URI to the directory inside of Drupal's default files location.
 */
function kissmetrics_get_directory($directory = NULL) {
  $path = &drupal_static(__FUNCTION__);

  if (!isset($path)) {
    $path = variable_get('kissmetrics_log_dir', 'kissmetrics');
  }

  if (!empty($directory)) {
    return file_build_uri($directory);
  }
  else {
    return file_build_uri($path);
  }
}

/**
 * Check that the request log directory exists and is writable.
 *
 * @param string $directory
 *   Optional string specifying the filepath or URI of a directory to check.
 *
 * @return boolean
 *   TRUE if the directory exists (or was created) and is writable. FALSE
 *   otherwise.
 */
function kissmetrics_check_directory($directory = NULL) {
  $directory = kissmetrics_get_directory($directory);
  $result = file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  if (!$result) {
    watchdog('file system', 'The directory %directory does not exist or is not writable.', array('%directory' => $directory), WATCHDOG_ERROR);
  }
  return $result;
}

/**
 * Recursively delete all files and folders in the request log directory.
 */
function kissmetrics_clear_directory() {
  $directory = kissmetrics_get_directory();
  return file_unmanaged_delete_recursive($directory);
}

/**
 * Move a directory to a new location.
 *
 * @param string $old_dir
 *   A string specifying the filepath or URI of the original directory.
 * @param string $new_dir
 *   A string specifying the filepath or URI of the new directory.
 * @param int $replace
 *   Replace behavior when the destination file already exists.
 *
 * @return boolean
 *   TRUE if the directory was moved successfully. FALSE otherwise.
 */
function kissmetrics_directory_move($old_dir, $new_dir, $replace = FILE_EXISTS_REPLACE) {
  $success = file_prepare_directory($new_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  $old_path = drupal_realpath($old_dir);
  $new_path = drupal_realpath($new_dir);
  if (!is_dir($old_path) || !is_dir($new_path) || !$success) {
    return FALSE;
  }

  $files = file_scan_directory($old_dir, '/.*/');
  foreach ($files as $file) {
    $file->uri_new = $new_dir . '/' . basename($file->filename);
    $success &= (bool) file_unmanaged_move($file->uri, $file->uri_new, $replace);
  }

  // Remove the old directory.
  $success &= drupal_rmdir($old_dir);
  return $success;
}
